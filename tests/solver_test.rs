use equator::assert;
use faer::prelude::*;
use faer::utils::approx::*;

use itertools::Itertools;
use ottr::{
    elements::beams::{BeamSection, Damping},
    interp::gauss_legendre_lobotto_points,
    model::Model,
    node::Direction,
    quadrature::Quadrature,
    solver::Solver,
    state::State,
    util::{quat_derivative, quat_rotate_vector, ColRefReshape},
};

fn setup_test(max_iter: usize) -> (Solver, State) {
    //--------------------------------------------------------------------------
    // Create element
    //--------------------------------------------------------------------------

    let xi = gauss_legendre_lobotto_points(2);
    let s = xi.iter().map(|v| (v + 1.) / 2.).collect_vec();

    // Quadrature rule
    let gq = Quadrature::gauss(7);

    // Model
    let mut model = Model::new();
    let node_ids = s
        .iter()
        .map(|&si| {
            model
                .add_node()
                .element_location(si)
                .position(10. * si + 2., 0., 0., 1., 0., 0., 0.)
                .build()
        })
        .collect_vec();

    // Mass matrix 6x6
    let m_star = mat![
        [8.538, 0.000, 0.000, 0.0000, 0.00000, 0.0000],
        [0.000, 8.538, 0.000, 0.0000, 0.00000, 0.0000],
        [0.000, 0.000, 8.538, 0.0000, 0.00000, 0.0000],
        [0.000, 0.000, 0.000, 1.4433, 0.00000, 0.0000],
        [0.000, 0.000, 0.000, 0.0000, 0.40972, 0.0000],
        [0.000, 0.000, 0.000, 0.0000, 0.00000, 1.0336],
    ] * Scale(1e-2);

    // Stiffness matrix 6x6
    let c_star = mat![
        [1368.17, 0., 0., 0., 0., 0.],
        [0., 88.56, 0., 0., 0., 0.],
        [0., 0., 38.78, 0., 0., 0.],
        [0., 0., 0., 16.960, 17.610, -0.351],
        [0., 0., 0., 17.610, 59.120, -0.370],
        [0., 0., 0., -0.351, -0.370, 141.47],
    ] * Scale(1e3);

    model.add_beam_element(
        &node_ids,
        &gq,
        &[
            BeamSection {
                s: 0.,
                m_star: m_star.clone(),
                c_star: c_star.clone(),
            },
            BeamSection {
                s: 1.,
                m_star: m_star.clone(),
                c_star: c_star.clone(),
            },
        ],
        &Damping::None,
    );

    //--------------------------------------------------------------------------
    // Add constraint
    //--------------------------------------------------------------------------

    model.add_prescribed_constraint(node_ids[0]);

    //--------------------------------------------------------------------------
    // Create solver
    //--------------------------------------------------------------------------

    let mut state = model.create_state();

    model.set_time_step(0.005);
    model.set_rho_inf(0.);
    model.set_max_iter(max_iter);
    let mut solver = model.create_solver();

    state.fx[(Direction::Z as usize, state.n_nodes - 1)] = 100. * (10.0 * 0.005 as f64).sin();

    solver.step(&mut state);

    (solver, state)
}

#[test]
fn test_iter_0_qp_weight() {
    let (solver, _) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.weight ~
        col![
            0.1294849661688697,
            0.27970539148927664,
            0.3818300505051189,
            0.4179591836734694,
            0.3818300505051189,
            0.27970539148927664,
            0.1294849661688697,
        ]
    );
}

#[test]
fn test_iter_0_qp_jacobian() {
    let (solver, _) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.jacobian ~
        col![4.999999999999998, 5., 5., 5., 5., 5., 5.]
    );
}

#[test]
fn test_iter_0_x_delta() {
    let (solver, _) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.x_delta ~
        mat![
            [0., 0., 0.,],
            [0., 0.000000012698041818239863, -0.00000006301462202431554],
            [0., -0.000017700591284532157, 0.0004940817168310309],
            [0., -0.00000020541207214437545, 0.00007303881910508567],
            [0., -0.00004533733310028517, -0.0001497106737114634],
            [0., -0.000000007120975045706844, -0.00000003833906280189217],
        ]
    );
}

#[test]
fn test_iter_0_shape_interp() {
    let (solver, _) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.shape_interp ~
        mat![
            [
                0.9249568708071938,
                0.09919417072837067,
                -0.02415104153556458
            ],
            [0.6456998424079189, 0.4501315007835565, -0.09583134319147546],
            [
                0.28527771913696964,
                0.8352897131034578,
                -0.12056743224042735
            ],
            [
                -0.000000000000000030616169978683824,
                0.9999999999999999,
                0.00000000000000003061616997868383
            ],
            [-0.12056743224042736, 0.8352897131034577, 0.2852777191369697],
            [-0.09583134319147543, 0.4501315007835564, 0.645699842407919],
            [
                -0.02415104153556458,
                0.09919417072837067,
                0.9249568708071938
            ],
        ]
    );
}

#[test]
fn test_iter_0_shape_deriv() {
    let (solver, _) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.shape_deriv ~
        mat![
            [-1.4491079123427584, 1.8982158246855168, -0.4491079123427585],
            [
                -1.2415311855993942,
                1.4830623711987885,
                -0.24153118559939435
            ],
            [-0.9058451513773971, 0.811690302754794, 0.09415484862260304],
            [
                -0.4999999999999999,
                -0.00000000000000011102230246251565,
                0.5
            ],
            [
                -0.09415484862260293,
                -0.8116903027547941,
                0.9058451513773971
            ],
            [0.24153118559939446, -1.483062371198789, 1.2415311855993945],
            [0.4491079123427585, -1.8982158246855168, 1.4491079123427584],
        ]
    );
}

#[test]
fn test_iter_0_qp_u() {
    let (_, state) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        state.u ~
        mat![
            [0., 0., 0.],
            [0., 0.000000012698041818239863, -0.00000006301462202431554],
            [0., -0.000017700591284532157, 0.0004940817168310309],
            [1., 0.9999999997430605, 0.9999999965315055],
            [0., -0.00000010270603606339132, 0.000036519409510320375],
            [0., -0.00002266866654820109, -0.0000748553367691866],
            [
                0.,
                -0.0000000035604875225484786,
                -0.000000019169531378782948
            ],
        ]
    );
}

#[test]
fn test_iter_0_qp_v() {
    let (_, state) = setup_test(0);
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        state.v ~
        mat![
            [0., 0., 0.],
            [0., 0.0000038094125454719587, -0.00001890438660729466],
            [0., -0.005310177385359647, 0.14822451504930928],
            [0., -0.00006162362164331263, 0.0219116457315257],
            [0., -0.013601199930085552, -0.04491320211343902],
            [0., -0.000002136292513712053, -0.000011501718840567651],
        ]
    );
}

#[test]
fn test_iter_0_qp_vd() {
    let (_, state) = setup_test(0);
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        state.vd ~
        mat![
            [0., 0., 0.],
            [0., 0.001015843345459189, -0.005041169761945243],
            [0., -1.4160473027625755, 39.52653734648247],
            [0., -0.016432965771553152, 5.843105528406853],
            [0., -3.6269866480228137, -11.976853896917072],
            [0., -0.0005696780036565475, -0.0030671250241513736],
        ]
    );
}

#[test]
fn test_iter_1_u() {
    let (solver, _) = setup_test(1);

    // u
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.u.col(5) ~
        col![
            0.,
            -0.000000034972742889838454,
            0.0003110608929747679,
            0.9999999980097208,
            0.000023534345752081037,
            -0.000058537960070724654,
            -0.000000013980450987462321,
        ]
    );
}

#[test]
fn test_iter_1_x0_prime() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.x0_prime.col(5).subrows(0, 3) ~
        col![1., 0., 0.]
    );
}

#[test]
fn test_iter_1_u_prime() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.u_prime.col(5) ~
        col![
            0.,
            -0.000000019413321280097275,
            0.00012793378811245458,
            -9.085761181394619e-10,
            0.000009098461048823692,
            -0.000011863237728920081,
            -0.000000003703829190454148,
        ]
    );
}

#[test]
fn test_iter_1_r_x0_prime() {
    let (solver, _) = setup_test(1);

    let mut r_x0_prime = Col::<f64>::zeros(3);
    let r = solver.elements.beams.qp.u.col(5).subrows(3, 4);
    let x0_prime = solver.elements.beams.qp.x0_prime.col(5).subrows(0, 3);
    quat_rotate_vector(r, x0_prime, r_x0_prime.as_mut());

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        r_x0_prime ~
        col![
            0.999999993146614,
            -0.00000003071620710312654,
            0.00011707591925039401,
        ]
    );
}

#[test]
fn test_iter_1_r_deriv() {
    let (solver, _) = setup_test(1);

    let r = solver.elements.beams.qp.u.col(0).subrows(3, 4).to_owned();
    let mut rd = Mat::<f64>::zeros(3, 4);
    quat_derivative(r.as_ref(), rd.as_mut());
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        rd ~
        mat![
            [
                0.0000008921696159617079,
                0.999999999999505,
                -0.00000000010978454135193555,
                -0.0000004407652322695578
            ],
            [
                0.0000004407652322695578,
                0.00000000010978454135193555,
                0.999999999999505,
                0.0000008921696159617079
            ],
            [
                -0.00000000010978454135193555,
                0.0000004407652322695578,
                -0.0000008921696159617079,
                0.999999999999505
            ],
        ]
    );
}

#[test]
fn test_iter_1_strain() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.strain.col(4) ~
        col![
            0.0000000032464819721411686,
            0.00000000424025658973485,
            0.000011806857959243921,
            0.000013265718278904585,
            -0.00001976296290376701,
            -0.000000005459575407422515,
        ]
    );

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.strain.col(5) ~
        col![
            0.000000006853385969840531,
            0.000000011302885823029263,
            0.000010857868862060568,
            0.000018196922200303494,
            -0.000023726475582593607,
            -0.000000006900834765856247,
        ]
    );
}

#[test]
fn test_iter_1_qp_x() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.x.col(5) ~
        col![
            10.707655927996973,
            -0.000000034972742889838375,
            0.000311060892974768,
            0.9999999980097208,
            0.000023534345752081037,
            -0.000058537960070724654,
            -0.000000013980450987462321,
        ]
    );
}

#[test]
fn test_iter_1_rr0() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver
            .elements
            .beams
            .qp
            .rr0
            .col(4)
            .reshape(6, 6)
            .submatrix(3, 0, 3, 3) ~
        Mat::<f64>::zeros(3, 3)
    );
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver
            .elements
            .beams
            .qp
            .rr0
            .col(4)
            .reshape(6, 6)
            .submatrix(0, 3, 3, 3) ~
        Mat::<f64>::zeros(3, 3)
    );

    let rr0 = mat![
        [
            0.9999999967535181,
            0.00000001605278510514304,
            -0.00008057892756454613
        ],
        [
            -0.000000017717930036623995,
            0.9999999997864836,
            -0.000020664768416702024
        ],
        [
            0.00008057892721561412,
            0.00002066476977730603,
            0.999999996540002
        ],
    ];

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver
            .elements
            .beams
            .qp
            .rr0
            .col(4)
            .reshape(6, 6)
            .submatrix(0, 0, 3, 3) ~
        rr0
    );

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver
            .elements
            .beams
            .qp
            .rr0
            .col(4)
            .reshape(6, 6)
            .submatrix(3, 3, 3, 3) ~
        rr0
    );
}

#[test]
fn test_iter_1_qp_c_star() {
    let (solver, _) = setup_test(1);
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.c_star.col(4).reshape(6, 6) ~
        mat![
            [1368170., 0., 0., 0., 0., 0.],
            [0., 88560., 0., 0., 0., 0.],
            [0., 0., 38780., 0., 0., 0.],
            [0., 0., 0., 16960., 17610., -351.],
            [0., 0., 0., 17610., 59120., -370.],
            [0., 0., 0., -351., -370., 141470.],
        ]
    );
}

#[test]
fn test_iter_1_cuu() {
    let (solver, _) = setup_test(1);
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.cuu.col(4).reshape(6, 6) ~
        mat![
            [
                1368169.991368319,
                -0.022754931292556416,
                107.12081971991294,
                0.,
                0.,
                0.
            ],
            [
                -0.022754931292556416,
                88559.99997874272,
                1.0286903413354556,
                0.,
                0.,
                0.
            ],
            [
                107.12081971991294,
                1.0286903413354562,
                38780.008652938464,
                0.,
                0.,
                0.
            ],
            [
                0.,
                0.,
                0.,
                16960.05794022592,
                17610.03789071854,
                -360.66897629540875
            ],
            [
                0.,
                0.,
                0.,
                17610.037890718537,
                59120.014703069006,
                -370.28274039085784
            ],
            [
                0.,
                0.,
                0.,
                -360.6689762954087,
                -370.2827403908579,
                141469.92735670513
            ],
        ]
    );

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.cuu.col(5).reshape(6, 6) ~
        mat![
            [
                1368169.9817783544,
                -0.039579083676876035,
                155.63955528468207,
                0.,
                0.,
                0.
            ],
            [
                -0.039579083676876035,
                88559.99988971555,
                2.3430747566400774,
                0.,
                0.,
                0.
            ],
            [
                155.63955528468207,
                2.343074756640078,
                38780.01833192983,
                0.,
                0.,
                0.
            ],
            [
                0.,
                0.,
                0.,
                16960.084781669077,
                17610.06144779848,
                -364.7482402489932
            ],
            [
                0.,
                0.,
                0.,
                17610.061447798485,
                59120.033931447804,
                -371.81438261933124
            ],
            [
                0.,
                0.,
                0.,
                -364.74824024899334,
                -371.81438261933124,
                141469.88128688314
            ],
        ]
    );
}

#[test]
fn test_iter_1_qp_fc() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.fe_c.col(4) ~
        col![
            0.005706498962533676,
            0.00038766265036750165,
            0.45787040595117917,
            -0.12303720588151548,
            -0.9347748346382493,
            0.0017609852944873903,
        ]
    );

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.fe_c.col(5) ~
        col![
            0.011066510391149387,
            0.0010264240944318046,
            0.42106944665784724,
            -0.10920083263909948,
            -1.0822585579738384,
            0.0012082892448600604,
        ]
    );
}

#[test]
fn test_iter_1_fd() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.fe_d.col(5) ~
        col![
            0.,
            0.,
            0.,
            0.0000001394886790597582,
            0.4210680308772517,
            -0.0010264243092695262,
        ]
    );
}

#[test]
fn test_iter_1_node_fe() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.node_fe.col(1) ~
        col![
            -0.0102686183575055,
            -0.0004199570868555979,
            -1.6050404609812177,
            -0.05495726079806835,
            0.11197003854397347,
            -0.0001627864101682751,
        ]
    );
}

#[test]
fn test_iter_1_qp_fi() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.fi.col(5) ~
        col![
            0.,
            -0.0002388778230347526,
            2.124670323374855,
            0.05434739660651931,
            -0.038374678088636135,
            -0.00001343769407370812,
        ]
    );
}

#[test]
fn test_iter_1_node_fi() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.node_fi.col(0) ~
        col![
            0.,
            0.0002012934946484987,
            -1.2055266653541368,
            -0.028269299375138182,
            0.006450195743127801,
            0.000004165230021125061,
        ]
    );
}

#[test]
fn test_iter_1_residual() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.r ~
        col![
            0.0012173682910865844,
            0.00003758291799171295,
            0.00000019226389844084757,
            -1.720176981412358e-8,
            -1.3636911599945734e-8,
            0.00004035004975103031,
            -0.0102686183575055,
            -0.0002443260439172247,
            -0.0000012550054029336621,
            1.612768253528296e-7,
            -2.850962204092866e-7,
            -0.0002040543566753146,
            0.009051250066418914,
            0.00020674312592550842,
            0.000001062741501911546,
            2.8651856190387015e-7,
            -6.677160976908958e-9,
            -0.0006527242122432346,
        ]
    );
}

// #[test]
// fn test_iter_1_solver_kt() {
//     let (solver, _) = setup_test(1);

//     let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
//     assert!(
//         solver.kt ~
//         mat![
//             [319239.66636532143, -0.0006403795218210107, 5.242280915619271, 3.966948951282804e-8, -24.03914193128975, -0.004443814858534332, -364845.33238421334, 0.0018325051839256268, -9.082557874359937, -2.662548324462085e-8, -12.07790365974279, -0.0019834388097720703, 45605.666018891876, -0.0011921256621046164, 3.8402769587406667, -2.771636246377022e-7, 1.1423440024227562, 0.001982190277118616],
//             [-0.0006403795218210106, 20663.999997963725, -0.037585840832387155, 0.5450152298169422, 0.12324082256125102, 44280.0000063646, 0.0018325051839256268, -23615.99999240683, -0.04738733375263345, -0.7845957036719954, 0.24784504928949277, 59039.99997657329, -0.0011921256621046164, 2951.999994443101, 0.08497317458502061, 1.0899047985698815, 0.24170982668021418, -14759.998747966338],
//             [5.242280915619271, -0.037585840832387155, 9048.666970048183, -0.000188864022094635, -19390.00011183922, -0.12324086223074052, -9.082557874359939, -0.04738733375263347, -10341.33429004649, -0.00012004034505167049, -25853.333422069532, -0.2478450226640095, 3.840276958740667, 0.08497317458502063, 1292.6673199983068, 0.0002616474792547406, 6463.332008113799, -0.24170954951658957],
//             [3.9669489512828034e-8, 0.545015229816942, -0.00018886402209463497, 3957.3362765353877, 4108.996930927371, -77.87740943623582, -1.5545748760807228e-7, -7.177934874698366e-5, 0.0003534017550090514, -4522.671789988305, -4696.005278735421, 97.39112637004368, 1.1578799809524423e-7, -0.544943450468195, -0.00016453773291441639, 565.3352450031122, 587.001938966386, -10.414383804804384],
//             [-24.03914193128974, 0.12324082256125099, -19390.000111839217, 4109.005707626651, 65501.33566018112, -85.78704929978842, 28.126073047546654, -0.002726744778391736, 25853.332685952835, -4696.0010234352485, 10088.002113009192, 99.41378726999193, -4.086931116256913, -0.12051407778285927, -6463.332574113618, 587.0010450864729, -10955.997567387303, -12.191475776764857],
//             [-0.004443814858534333, 44280.00000636458, -0.12324086223074052, -81.8210327707604, -86.08987923678573, 151089.66431360843, 0.006130786461181208, -59039.99933875827, 0.0027269002358793377, 97.1261836591682, 99.22160417890584, 21314.674203931307, -0.001686971602646875, 14759.999332393685, 0.12051396199486118, -10.610552020738904, -12.141656628493966, -24804.33514393987],
//             [-364845.33238421334, 0.0018325051839256268, -9.082557874359937, -1.5545748760807228e-7, 28.126073047546654, 0.006130786461181207, 729690.6614222707, -0.010930103292282656, 44.70163164161737, 6.153890095458093e-7, 23.55669716503801, -0.0012341998988125839, -364845.32903805736, 0.00909759810835703, -35.61907376725743, 1.4163490033237134e-6, 7.20897257282798, -0.008545861057880754],
//             [0.0018325051839256268, -23615.99999240683, -0.047387333752633445, -7.177934874681713e-5, -0.0027267447783917084, -59039.99933875827, -0.010930103292282656, 47231.99996364878, 0.5795567736657772, -4.359691162443054, -0.9695661118196577, -0.004018367056687566, 0.00909759810835703, -23615.99997124194, -0.5321694399131437, -6.539464775501052, -1.4516223626306854, 59039.99298268181],
//             [-9.082557874359937, -0.04738733375263347, -10341.33429004649, 0.00035340175500905136, 25853.332685952835, 0.0027269002358793516, 44.70163164161737, 0.5795567736657772, 20682.671947413794, -0.0006094983532972284, 0.004778996729783103, 0.969565496430648, -35.61907376725743, -0.5321694399131438, -10341.3376573673, -0.0013513390936675763, -25853.32564295683, 1.4516209462816823],
//             [-2.6625483244620823e-8, -0.7845957036719955, -0.00012004034505167046, -4522.671789988304, -4696.001069591685, 98.10684839798374, 6.153890095458093e-7, -4.359691162443054, -0.0006094983532972284, 9045.359480219955, 9392.019348513386, -214.97102651653853, -5.887635263011885e-7, 5.14428686611505, 0.000729538698348899, -4522.685077263995, -4696.014163216331, 86.82533334555974],
//             [-12.07790365974279, 0.24784504928949275, -25853.33342206953, -4696.005232578984, 10088.002113009192, 99.19995477215004, 23.556697165038006, -0.9695661118196577, 0.004778996727964113, 9392.019074554484, 238357.32956166455, -199.0380328320003, -11.478793505295219, 0.7217210625301649, 25853.328643072804, -4696.011656694843, 10087.984739137642, 97.45309802524213],
//             [-0.00198343880977207, 59039.99997657328, -0.24784502266400957, 96.41046163122813, 99.43543667674773, 21314.674203931307, -0.0012341998988125845, -0.004018367053049587, 0.969565496430648, -214.18214823309586, -199.0251093989071, 547770.6197653579, 0.003217638708584654, -59039.99595820622, -0.7217204737666387, 88.88357112472403, 97.25965072054925, 21314.685676470384],
//             [45605.666018891876, -0.0011921256621046164, 3.840276958740667, 1.1578799809524423e-7, -4.086931116256912, -0.001686971602646875, -364845.3290380575, 0.009097598108357032, -35.61907376725743, -5.887635263011885e-7, -11.478793505295224, 0.0032176387085846537, 319239.6630191656, -0.007905472446252415, 31.778796808516766, -1.1391853786860113e-6, -8.351316575250737, 0.00656367078076214],
//             [-0.0011921256621046164, 2951.9999944431015, 0.08497317458502063, -0.544943450468195, -0.12051407778285927, 14759.999332393685, 0.009097598108357032, -23615.999971241945, -0.5321694399131439, 5.14428686611505, 0.721721062530165, -59039.99595820622, -0.007905472446252415, 20663.99997679884, 0.44719626532812323, 5.449559976931172, 1.2099125359504714, -44279.99423471549],
//             [3.8402769587406675, 0.08497317458502063, 1292.6673199983068, -0.00016453773291441639, -6463.332574113618, 0.12051396199486118, -35.61907376725744, -0.5321694399131439, -10341.337657367301, 0.000729538698348899, 25853.3286430728, -0.7217204737666386, 31.77879680851677, 0.44719626532812323, 9048.670337368994, 0.001089691614412836, 19389.993634843027, -1.2099113967650927],
//             [-2.7716362463770214e-7, 1.0899047985698815, 0.0002616474792547406, 565.3352450031123, 587.0011515251108, -10.666539351658841, 1.4163490033237132e-6, -6.539464775501052, -0.0013513390936675765, -4522.6850772639955, -4696.012036292957, 88.12685570958826, -1.139185378686011e-6, 5.449559976931172, 0.001089691614412836, 3957.352633982876, 4109.014434032553, -99.52397367961919],
//             [1.1423440024227571, 0.24170982668021423, 6463.332008113799, 587.0018325277479, -10955.997567387303, -12.144887337870262, 7.208972572827973, -1.4516223626306854, -25853.32564295683, -4696.013783618218, 10087.984739137632, 97.29422296481025, -8.351316575250731, 1.2099125359504717, 19389.993634843027, 4109.014757606114, 65501.32521508777, -90.02222386922627],
//             [0.001982190277118616, -14759.998747966338, -0.24170954951658954, -10.358396473884444, -12.18824506738856, -24804.33514393987, -0.008545861057880754, 59039.99298268182, 1.451620946281682, 87.58204876069553, 97.41852578098117, 21314.68567647037, 0.00656367078076214, -44279.99423471549, -1.2099113967650927, -99.95658136850574, -89.99088107043927, 151089.6268729761],
//         ]
//     );
// }

// #[test]
// fn test_iter_1_solver_m() {
//     let (solver, _) = setup_test(1);

//     let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
//     assert!(
//         solver.m ~
//         mat![
//             [0.11383999999999994, 1.0454210420562007e-26, -1.2753963840166277e-22, 0.0, 0.0, 0.0, 0.05692, -7.050274961807794e-26, -2.3570849668136765e-22, 0.0, 0.0, 0.0, -0.02846, -3.3337447685996304e-26, 3.697308153457584e-23, 0.0, 0.0, 0.0],
//             [4.267421567487123e-27, 0.11383999999999997, 1.6770627373245563e-23, 0.0, 0.0, 0.0, 4.60470172632995e-27, 0.056920000000000026, 4.685389807427892e-23, 0.0, 0.0, 0.0, -2.3162890329366468e-26, -0.028460000000000006, -1.9202924624593336e-23, 0.0, 0.0, 0.0],
//             [-1.6777199254620064e-22, 1.2668056084305579e-23, 0.11383999999999996, 0.0, 0.0, 0.0, -3.3282995796631143e-22, -4.504371955215589e-24, 0.05692000000000001, 0.0, 0.0, 0.0, 5.106972611698285e-23, -7.987071056427063e-23, -0.028460000000000003, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, 0.019243999998169285, -6.6716397046083576e-12, 4.463921838626196e-8, 0.0, 0.0, 0.0, 0.009622000007838843, 4.662015724550358e-11, -4.607057395314567e-8, 0.0, 0.0, 0.0, -0.00481099999206351, 4.1563049519004206e-11, -7.919214856447849e-8],
//             [0.0, 0.0, 0.0, -6.6716397046083576e-12, 0.005462933333867624, 3.315843387321588e-8, 0.0, 0.0, 0.0, 4.662015724550358e-11, 0.0027314666656339344, 8.728336216393546e-8, 0.0, 0.0, 0.0, 4.1563049519004206e-11, -0.0013657333351764214, 3.230408791689106e-8],
//             [0.0, 0.0, 0.0, 4.4639218386261956e-8, 3.3158433873215874e-8, 0.01378133333462974, 0.0, 0.0, 0.0, -4.607057395314566e-8, 8.728336216393546e-8, 0.006890666659860557, 0.0, 0.0, 0.0, -7.919214856447846e-8, 3.230408791689106e-8, -0.003445333339426736],
//             [0.05692, -7.050274961807793e-26, -2.3570849668136765e-22, 0.0, 0.0, 0.0, 0.4553600000000002, 2.9789593366782785e-25, 1.1759861935992896e-21, 0.0, 0.0, 0.0, 0.05692000000000001, 2.0385254036206313e-25, 8.781617054306429e-23, 0.0, 0.0, 0.0],
//             [4.604701726329947e-27, 0.05692000000000002, 4.685389807427892e-23, 0.0, 0.0, 0.0, -2.3042950112737143e-27, 0.45536000000000026, 1.3951560321598233e-22, 0.0, 0.0, 0.0, 8.804685959113594e-26, 0.056920000000000005, 2.995780042409443e-23, 0.0, 0.0, 0.0],
//             [-3.3282995796631143e-22, -4.5043719552156006e-24, 0.05692000000000001, 0.0, 0.0, 0.0, -8.76292676712215e-22, 3.878016121595977e-22, 0.45536000000000026, 0.0, 0.0, 0.0, 1.2855105349837996e-22, 3.2398721421229817e-22, 0.056920000000000005, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, 0.009622000007838845, 4.6620157245503583e-11, -4.607057395314567e-8, 0.0, 0.0, 0.0, 0.07697599992833419, -4.835939638456283e-10, 1.0827920943716617e-6, 0.0, 0.0, 0.0, 0.009621999960415198, -2.1287235532152043e-10, 3.628391682110596e-7],
//             [0.0, 0.0, 0.0, 4.6620157245503583e-11, 0.0027314666656339344, 8.728336216393546e-8, 0.0, 0.0, 0.0, -4.835939638456283e-10, 0.02185173334173943, -1.677319440417763e-7, 0.0, 0.0, 0.0, -2.1287235532152043e-10, 0.002731466675071751, -2.164997138314997e-7],
//             [0.0, 0.0, 0.0, -4.607057395314566e-8, 8.728336216393546e-8, 0.006890666659860555, 0.0, 0.0, 0.0, 1.0827920943716617e-6, -1.6773194404177627e-7, 0.05512533339659314, 0.0, 0.0, 0.0, 3.6283916821105947e-7, -2.164997138314997e-7, 0.006890666697846388],
//             [-0.028460000000000003, -3.33374476859963e-26, 3.6973081534575844e-23, 0.0, 0.0, 0.0, 0.05692, 2.038525403620631e-25, 8.78161705430643e-23, 0.0, 0.0, 0.0, 0.11384000000000002, 1.169035315139791e-25, -1.3113453992044221e-23, 0.0, 0.0, 0.0],
//             [-2.3162890329366473e-26, -0.028460000000000006, -1.9202924624593336e-23, 0.0, 0.0, 0.0, 8.804685959113594e-26, 0.05691999999999999, 2.995780042409442e-23, 0.0, 0.0, 0.0, 3.9937556386349583e-25, 0.11384000000000002, 4.721109752309594e-22, 0.0, 0.0, 0.0],
//             [5.106972611698286e-23, -7.987071056427065e-23, -0.028460000000000006, 0.0, 0.0, 0.0, 1.2855105349837996e-22, 3.2398721421229817e-22, 0.05691999999999999, 0.0, 0.0, 0.0, -1.8995245513829693e-23, 4.968209866847259e-22, 0.11384000000000002, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, -0.004810999992063511, 4.156304951900421e-11, -7.919214856447849e-8, 0.0, 0.0, 0.0, 0.009621999960415198, -2.1287235532152043e-10, 3.628391682110596e-7, 0.0, 0.0, 0.0, 0.019243999916687942, -3.935684844893747e-10, 6.580038249230413e-7],
//             [0.0, 0.0, 0.0, 4.156304951900421e-11, -0.0013657333351764214, 3.230408791689106e-8, 0.0, 0.0, 0.0, -2.1287235532152043e-10, 0.0027314666750717508, -2.164997138314997e-7, 0.0, 0.0, 0.0, -3.9356848448937473e-10, 0.005462933357586966, -4.225161862410892e-7],
//             [0.0, 0.0, 0.0, -7.919214856447846e-8, 3.230408791689106e-8, -0.0034453333394267355, 0.0, 0.0, 0.0, 3.6283916821105947e-7, -2.164997138314997e-7, 0.006890666697846387, 0.0, 0.0, 0.0, 6.580038249230412e-7, -4.225161862410892e-7, 0.013781333392391766],
//         ]
//     );
// }

// #[test]
// fn test_iter_1_solver_ct() {
//     let (solver, _) = setup_test(1);

//     let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
//     assert!(
//         solver.ct ~
//         mat![
//             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, -5.492113933953935e-10, -8.877059484589646e-10, -2.0392615914709534e-5, 0.0, 0.0, 0.0, 2.3516531767400795e-9, 4.781416147353705e-9, 2.1046505618093104e-5, 0.0, 0.0, 0.0, 2.3809468558005548e-9, 4.131528293566452e-9, 3.6177495140121256e-5],
//             [0.0, 0.0, 0.0, -1.092243400274401e-9, 1.6028839541127547e-10, -6.532511339227429e-6, 0.0, 0.0, 0.0, 8.95851030511904e-9, -3.09819578348331e-10, -1.719561088464389e-5, 0.0, 0.0, 0.0, 8.10914100593813e-9, -5.529264079329766e-10, -6.364196791169522e-6],
//             [0.0, 0.0, 0.0, 3.378438129241179e-5, 1.6480041331125335e-5, 3.8892299798411816e-10, 0.0, 0.0, 0.0, -3.4867677142326575e-5, 4.33806205637513e-5, -2.0418335983917496e-9, 0.0, 0.0, 0.0, -5.993513897562936e-5, 1.6055424153445366e-5, -1.828020447867579e-9],
//             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, 2.3516531767400795e-9, 4.781416147353704e-9, 2.1046505618093107e-5, 0.0, 0.0, 0.0, -2.149975671309438e-8, -7.05001988290029e-8, -0.0004946538984946872, 0.0, 0.0, 0.0, -1.1875440599942301e-8, -2.1307529321619512e-8, -0.00016575648617857814],
//             [0.0, 0.0, 0.0, 8.95851030511904e-9, -3.0981957834833095e-10, -1.719561088464389e-5, 0.0, 0.0, 0.0, -7.343028514601141e-8, 2.5218266303596265e-9, 3.3044705617823364e-5, 0.0, 0.0, 0.0, -4.139507432887156e-8, 2.5215252100802374e-9, 4.265239804932198e-5],
//             [0.0, 0.0, 0.0, -3.4867677142326575e-5, 4.338062056375131e-5, -2.0418335983917496e-9, 0.0, 0.0, 0.0, 0.0008194915226343798, -8.336429647849189e-5, 1.8977930082734758e-8, 0.0, 0.0, 0.0, 0.000274608233044844, -0.00010760231717753276, 9.353915389862066e-9],
//             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
//             [0.0, 0.0, 0.0, 2.380946855800555e-9, 4.131528293566453e-9, 3.6177495140121256e-5, 0.0, 0.0, 0.0, -1.18754405999423e-8, -2.130752932161951e-8, -0.00016575648617857814, 0.0, 0.0, 0.0, -2.4993618086818994e-8, -2.9147156486292795e-8, -0.00030059710407786665],
//             [0.0, 0.0, 0.0, 8.10914100593813e-9, -5.529264079329766e-10, -6.364196791169522e-6, 0.0, 0.0, 0.0, -4.139507432887156e-8, 2.5215252100802374e-9, 4.2652398049321976e-5, 0.0, 0.0, 0.0, -8.609143319822111e-8, 7.276089671623454e-9, 8.323950160926504e-5],
//             [0.0, 0.0, 0.0, -5.993513897562936e-5, 1.6055424153445366e-5, -1.828020447867579e-9, 0.0, 0.0, 0.0, 0.000274608233044844, -0.00010760231717753275, 9.353915389862066e-9, 0.0, 0.0, 0.0, 0.0004979982425782476, -0.00020999436840558758, 1.7717528415195545e-8],
//         ]
//     );
// }

#[test]
fn test_iter_1_solver_t() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.t_sp.to_dense() ~
        mat![
            [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999999996574209, 3.5620395968971034e-9, -2.266866613275471e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.5589353177710117e-9, 0.999999999999993, 1.0270608798991574e-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.266866613324229e-5, -1.0270598037455526e-7, 0.9999999996574139, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999999962644521, 1.7347082909495525e-8, -7.485533728943503e-5],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0991979875493056e-8, 0.9999999991108882, -3.651940857981379e-5],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.485533635602174e-5, 3.651941049306945e-5, 0.9999999953753408],
        ]
    );
}

#[test]
fn test_iter_1_solver_st() {
    let (solver, _) = setup_test(1);

    // The submatrix is the first 6x6 block of the conditioned system matrix
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.st_sp.to_dense().submatrix(0, 0, 6, 6) ~
        mat![
            [8.208671659133037, -1.6009488045525302e-8, 0.0001310570228904819, 9.917372378206993e-13, -0.0006009785482822438, -1.1109537146335791e-7],
            [-1.6009488045525302e-8, 0.7442799999490931, -9.396460208096746e-7, 1.3625380745423544e-5, 3.081020564031268e-6, 1.1070000001591147],
            [0.0001310570228904819, -9.396460208096747e-7, 0.45389667425120445, -4.721600552365861e-9, -0.48475000279598046, -3.081021555768507e-6],
            [9.917372378206993e-13, 1.3625380745423544e-5, -4.721600552365861e-9, 0.13742140690560417, 0.10272492325318319, -0.0019469989020884837],
            [-0.0006009785482822438, 3.081020564031268e-6, -0.48475000279598046, 0.10272514266913117, 1.6484592581734647, -0.002144658909462008],
            [-1.1109537146335791e-7, 1.1070000001591145, -3.081021555768506e-6, -0.0020451831579725442, -0.0021520570637419134, 3.8048042745123873],
        ]
    );
}

#[test]
fn test_iter_1_x() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.x.subrows(0, solver.n_system) ~
        col![
            0.,
            0.,
            0.,
            0.,
            0.,
            0.,
            9.082920642093272e-10,
            -0.0000000001434626536582747,
            0.000000000006255829273157266,
            -0.00000000003164459471874266,
            0.000000000000951335320233587,
            0.00000000014477835133791111,
            -0.000000026569460285280772,
            -0.0000000005611783441842933,
            -0.00000000001743434952275983,
            -0.000000000005406546196785461,
            0.000000000007450824636627356,
            0.000000004160415663177322,
        ]
    );
}

#[test]
fn test_iter_1_x_delta() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.x_delta ~
        mat![
            [0., 0.0000000009082920642093272, -0.000000026569460285280772],
            [
                0.,
                -0.0000000001434626536582747,
                -0.0000000005611783441842933
            ],
            [
                0.,
                0.000000000006255829273157266,
                -0.00000000001743434952275983
            ],
            [
                0.,
                -0.00000000003164459471874266,
                -0.000000000005406546196785461
            ],
            [
                0.,
                0.000000000000951335320233587,
                0.000000000007450824636627356
            ],
            [0., 0.00000000014477835133791111, 0.000000004160415663177322],
        ]
    );
}

#[test]
fn test_steps() {
    let (mut solver, mut state) = setup_test(5);

    let tip_z_dof = solver.nfm.get_dof(state.n_nodes - 1, Direction::Z).unwrap();

    for i in 2..100 {
        state.fx[(Direction::Z as usize, state.n_nodes - 1)] =
            100. * (10.0 * (i as f64) * 0.005).sin();
        let res = solver.step(&mut state);
        assert_eq!(res.converged, true)
    }
}
