use equator::assert;
use faer::prelude::*;
use faer::utils::approx::*;

use itertools::Itertools;
use ottr::{
    elements::beams::{BeamSection, Damping},
    interp::gauss_legendre_lobotto_points,
    model::Model,
    node::Direction,
    quadrature::Quadrature,
    solver::Solver,
    state::State,
    util::{quat_derivative, quat_rotate_vector, ColRefReshape},
};

fn setup_test(max_iter: usize) -> (Solver, State) {
    //--------------------------------------------------------------------------
    // Create element
    //--------------------------------------------------------------------------

    let xi = gauss_legendre_lobotto_points(2);
    let s = xi.iter().map(|v| (v + 1.) / 2.).collect_vec();

    // Quadrature rule
    let gq = Quadrature::gauss(7);

    // Model
    let mut model = Model::new();
    let node_ids = s
        .iter()
        .map(|&si| {
            model
                .add_node()
                .element_location(si)
                .position(10. * si + 2., 0., 0., 1., 0., 0., 0.)
                .build()
        })
        .collect_vec();

    // Mass matrix 6x6
    let m_star = mat![
        [8.538, 0.000, 0.000, 0.0000, 0.00000, 0.0000],
        [0.000, 8.538, 0.000, 0.0000, 0.00000, 0.0000],
        [0.000, 0.000, 8.538, 0.0000, 0.00000, 0.0000],
        [0.000, 0.000, 0.000, 1.4433, 0.00000, 0.0000],
        [0.000, 0.000, 0.000, 0.0000, 0.40972, 0.0000],
        [0.000, 0.000, 0.000, 0.0000, 0.00000, 1.0336],
    ] * Scale(1e-2);

    // Stiffness matrix 6x6
    let c_star = mat![
        [1368.17, 0., 0., 0., 0., 0.],
        [0., 88.56, 0., 0., 0., 0.],
        [0., 0., 38.78, 0., 0., 0.],
        [0., 0., 0., 16.960, 17.610, -0.351],
        [0., 0., 0., 17.610, 59.120, -0.370],
        [0., 0., 0., -0.351, -0.370, 141.47],
    ] * Scale(1e3);

    model.add_beam_element(
        &node_ids,
        &gq,
        &[
            BeamSection {
                s: 0.,
                m_star: m_star.clone(),
                c_star: c_star.clone(),
            },
            BeamSection {
                s: 1.,
                m_star: m_star.clone(),
                c_star: c_star.clone(),
            },
        ],
        Damping::None,
    );

    //--------------------------------------------------------------------------
    // Add constraint
    //--------------------------------------------------------------------------

    model.add_prescribed_constraint(node_ids[0]);

    //--------------------------------------------------------------------------
    // Create solver
    //--------------------------------------------------------------------------

    let mut state = model.create_state();

    model.set_time_step(0.005);
    model.set_rho_inf(0.);
    model.set_max_iter(max_iter);
    let mut solver = model.create_solver();

    let tip_z_dof = solver.nfm.get_dof(state.n_nodes - 1, Direction::Z).unwrap();
    solver.fx[tip_z_dof] = 100. * (10.0 * 0.005 as f64).sin();

    solver.step(&mut state);

    (solver, state)
}

#[test]
fn test_iter_0_qp_weight() {
    let (solver, _) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.weight ~
        col![
            0.1294849661688697,
            0.27970539148927664,
            0.3818300505051189,
            0.4179591836734694,
            0.3818300505051189,
            0.27970539148927664,
            0.1294849661688697,
        ]
    );
}

#[test]
fn test_iter_0_qp_jacobian() {
    let (solver, _) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.jacobian ~
        col![4.999999999999998, 5., 5., 5., 5., 5., 5.]
    );
}

#[test]
fn test_iter_0_x_delta() {
    let (solver, _) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.x_delta ~
        mat![
            [0., 0., 0.,],
            [0., 0.000000012698041818239863, -0.00000006301462202431554],
            [0., -0.000017700591284532157, 0.0004940817168310309],
            [0., -0.00000020541207214437545, 0.00007303881910508567],
            [0., -0.00004533733310028517, -0.0001497106737114634],
            [0., -0.000000007120975045706844, -0.00000003833906280189217],
        ]
    );
}

#[test]
fn test_iter_0_shape_interp() {
    let (solver, _) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.shape_interp ~
        mat![
            [
                0.9249568708071938,
                0.09919417072837067,
                -0.02415104153556458
            ],
            [0.6456998424079189, 0.4501315007835565, -0.09583134319147546],
            [
                0.28527771913696964,
                0.8352897131034578,
                -0.12056743224042735
            ],
            [
                -0.000000000000000030616169978683824,
                0.9999999999999999,
                0.00000000000000003061616997868383
            ],
            [-0.12056743224042736, 0.8352897131034577, 0.2852777191369697],
            [-0.09583134319147543, 0.4501315007835564, 0.645699842407919],
            [
                -0.02415104153556458,
                0.09919417072837067,
                0.9249568708071938
            ],
        ]
    );
}

#[test]
fn test_iter_0_shape_deriv() {
    let (solver, _) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.shape_deriv ~
        mat![
            [-1.4491079123427584, 1.8982158246855168, -0.4491079123427585],
            [
                -1.2415311855993942,
                1.4830623711987885,
                -0.24153118559939435
            ],
            [-0.9058451513773971, 0.811690302754794, 0.09415484862260304],
            [
                -0.4999999999999999,
                -0.00000000000000011102230246251565,
                0.5
            ],
            [
                -0.09415484862260293,
                -0.8116903027547941,
                0.9058451513773971
            ],
            [0.24153118559939446, -1.483062371198789, 1.2415311855993945],
            [0.4491079123427585, -1.8982158246855168, 1.4491079123427584],
        ]
    );
}

#[test]
fn test_iter_0_qp_u() {
    let (_, state) = setup_test(0);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        state.u ~
        mat![
            [0., 0., 0.],
            [0., 0.000000012698041818239863, -0.00000006301462202431554],
            [0., -0.000017700591284532157, 0.0004940817168310309],
            [1., 0.9999999997430605, 0.9999999965315055],
            [0., -0.00000010270603606339132, 0.000036519409510320375],
            [0., -0.00002266866654820109, -0.0000748553367691866],
            [
                0.,
                -0.0000000035604875225484786,
                -0.000000019169531378782948
            ],
        ]
    );
}

#[test]
fn test_iter_0_qp_v() {
    let (_, state) = setup_test(0);
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        state.v ~
        mat![
            [0., 0., 0.],
            [0., 0.0000038094125454719587, -0.00001890438660729466],
            [0., -0.005310177385359647, 0.14822451504930928],
            [0., -0.00006162362164331263, 0.0219116457315257],
            [0., -0.013601199930085552, -0.04491320211343902],
            [0., -0.000002136292513712053, -0.000011501718840567651],
        ]
    );
}

#[test]
fn test_iter_0_qp_vd() {
    let (_, state) = setup_test(0);
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        state.vd ~
        mat![
            [0., 0., 0.],
            [0., 0.001015843345459189, -0.005041169761945243],
            [0., -1.4160473027625755, 39.52653734648247],
            [0., -0.016432965771553152, 5.843105528406853],
            [0., -3.6269866480228137, -11.976853896917072],
            [0., -0.0005696780036565475, -0.0030671250241513736],
        ]
    );
}

#[test]
fn test_iter_1_u() {
    let (solver, _) = setup_test(1);

    // u
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.u.col(5) ~
        col![
            0.,
            -0.000000034972742889838454,
            0.0003110608929747679,
            0.9999999980097208,
            0.000023534345752081037,
            -0.000058537960070724654,
            -0.000000013980450987462321,
        ]
    );
}

#[test]
fn test_iter_1_x0_prime() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.x0_prime.col(5).subrows(0, 3) ~
        col![1., 0., 0.]
    );
}

#[test]
fn test_iter_1_u_prime() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.u_prime.col(5) ~
        col![
            0.,
            -0.000000019413321280097275,
            0.00012793378811245458,
            -9.085761181394619e-10,
            0.000009098461048823692,
            -0.000011863237728920081,
            -0.000000003703829190454148,
        ]
    );
}

#[test]
fn test_iter_1_r_x0_prime() {
    let (solver, _) = setup_test(1);

    let mut r_x0_prime = Col::<f64>::zeros(3);
    let r = solver.elements.beams.qp.u.col(5).subrows(3, 4);
    let x0_prime = solver.elements.beams.qp.x0_prime.col(5).subrows(0, 3);
    quat_rotate_vector(r, x0_prime, r_x0_prime.as_mut());

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        r_x0_prime ~
        col![
            0.999999993146614,
            -0.00000003071620710312654,
            0.00011707591925039401,
        ]
    );
}

#[test]
fn test_iter_1_r_deriv() {
    let (solver, _) = setup_test(1);

    let r = solver.elements.beams.qp.u.col(0).subrows(3, 4).to_owned();
    let mut rd = Mat::<f64>::zeros(3, 4);
    quat_derivative(r.as_ref(), rd.as_mut());
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        rd ~
        mat![
            [
                0.0000008921696159617079,
                0.999999999999505,
                -0.00000000010978454135193555,
                -0.0000004407652322695578
            ],
            [
                0.0000004407652322695578,
                0.00000000010978454135193555,
                0.999999999999505,
                0.0000008921696159617079
            ],
            [
                -0.00000000010978454135193555,
                0.0000004407652322695578,
                -0.0000008921696159617079,
                0.999999999999505
            ],
        ]
    );
}

#[test]
fn test_iter_1_strain() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.strain.col(4) ~
        col![
            0.0000000032464819721411686,
            0.00000000424025658973485,
            0.000011806857959243921,
            0.000013265718278904585,
            -0.00001976296290376701,
            -0.000000005459575407422515,
        ]
    );

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.strain.col(5) ~
        col![
            0.000000006853385969840531,
            0.000000011302885823029263,
            0.000010857868862060568,
            0.000018196922200303494,
            -0.000023726475582593607,
            -0.000000006900834765856247,
        ]
    );
}

#[test]
fn test_iter_1_qp_x() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.x.col(5) ~
        col![
            10.707655927996973,
            -0.000000034972742889838375,
            0.000311060892974768,
            0.9999999980097208,
            0.000023534345752081037,
            -0.000058537960070724654,
            -0.000000013980450987462321,
        ]
    );
}

#[test]
fn test_iter_1_rr0() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver
            .elements
            .beams
            .qp
            .rr0
            .col(4)
            .reshape(6, 6)
            .submatrix(3, 0, 3, 3) ~
        Mat::<f64>::zeros(3, 3)
    );
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver
            .elements
            .beams
            .qp
            .rr0
            .col(4)
            .reshape(6, 6)
            .submatrix(0, 3, 3, 3) ~
        Mat::<f64>::zeros(3, 3)
    );

    let rr0 = mat![
        [
            0.9999999967535181,
            0.00000001605278510514304,
            -0.00008057892756454613
        ],
        [
            -0.000000017717930036623995,
            0.9999999997864836,
            -0.000020664768416702024
        ],
        [
            0.00008057892721561412,
            0.00002066476977730603,
            0.999999996540002
        ],
    ];

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver
            .elements
            .beams
            .qp
            .rr0
            .col(4)
            .reshape(6, 6)
            .submatrix(0, 0, 3, 3) ~
        rr0
    );

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver
            .elements
            .beams
            .qp
            .rr0
            .col(4)
            .reshape(6, 6)
            .submatrix(3, 3, 3, 3) ~
        rr0
    );
}

#[test]
fn test_iter_1_qp_c_star() {
    let (solver, _) = setup_test(1);
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.c_star.col(4).reshape(6, 6) ~
        mat![
            [1368170., 0., 0., 0., 0., 0.],
            [0., 88560., 0., 0., 0., 0.],
            [0., 0., 38780., 0., 0., 0.],
            [0., 0., 0., 16960., 17610., -351.],
            [0., 0., 0., 17610., 59120., -370.],
            [0., 0., 0., -351., -370., 141470.],
        ]
    );
}

#[test]
fn test_iter_1_cuu() {
    let (solver, _) = setup_test(1);
    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.cuu.col(4).reshape(6, 6) ~
        mat![
            [
                1368169.991368319,
                -0.022754931292556416,
                107.12081971991294,
                0.,
                0.,
                0.
            ],
            [
                -0.022754931292556416,
                88559.99997874272,
                1.0286903413354556,
                0.,
                0.,
                0.
            ],
            [
                107.12081971991294,
                1.0286903413354562,
                38780.008652938464,
                0.,
                0.,
                0.
            ],
            [
                0.,
                0.,
                0.,
                16960.05794022592,
                17610.03789071854,
                -360.66897629540875
            ],
            [
                0.,
                0.,
                0.,
                17610.037890718537,
                59120.014703069006,
                -370.28274039085784
            ],
            [
                0.,
                0.,
                0.,
                -360.6689762954087,
                -370.2827403908579,
                141469.92735670513
            ],
        ]
    );

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.cuu.col(5).reshape(6, 6) ~
        mat![
            [
                1368169.9817783544,
                -0.039579083676876035,
                155.63955528468207,
                0.,
                0.,
                0.
            ],
            [
                -0.039579083676876035,
                88559.99988971555,
                2.3430747566400774,
                0.,
                0.,
                0.
            ],
            [
                155.63955528468207,
                2.343074756640078,
                38780.01833192983,
                0.,
                0.,
                0.
            ],
            [
                0.,
                0.,
                0.,
                16960.084781669077,
                17610.06144779848,
                -364.7482402489932
            ],
            [
                0.,
                0.,
                0.,
                17610.061447798485,
                59120.033931447804,
                -371.81438261933124
            ],
            [
                0.,
                0.,
                0.,
                -364.74824024899334,
                -371.81438261933124,
                141469.88128688314
            ],
        ]
    );
}

#[test]
fn test_iter_1_qp_fc() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.fe_c.col(4) ~
        col![
            0.005706498962533676,
            0.00038766265036750165,
            0.45787040595117917,
            -0.12303720588151548,
            -0.9347748346382493,
            0.0017609852944873903,
        ]
    );

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.fe_c.col(5) ~
        col![
            0.011066510391149387,
            0.0010264240944318046,
            0.42106944665784724,
            -0.10920083263909948,
            -1.0822585579738384,
            0.0012082892448600604,
        ]
    );
}

#[test]
fn test_iter_1_fd() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.fe_d.col(5) ~
        col![
            0.,
            0.,
            0.,
            0.0000001394886790597582,
            0.4210680308772517,
            -0.0010264243092695262,
        ]
    );
}

#[test]
fn test_iter_1_node_fe() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.node_fe.col(1) ~
        col![
            -0.0102686183575055,
            -0.0004199570868555979,
            -1.6050404609812177,
            -0.05495726079806835,
            0.11197003854397347,
            -0.0001627864101682751,
        ]
    );
}

#[test]
fn test_iter_1_qp_fi() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.qp.fi.col(5) ~
        col![
            0.,
            -0.0002388778230347526,
            2.124670323374855,
            0.05434739660651931,
            -0.038374678088636135,
            -0.00001343769407370812,
        ]
    );
}

#[test]
fn test_iter_1_node_fi() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.elements.beams.node_fi.col(0) ~
        col![
            0.,
            0.0002012934946484987,
            -1.2055266653541368,
            -0.028269299375138182,
            0.006450195743127801,
            0.000004165230021125061,
        ]
    );
}

#[test]
fn test_iter_1_residual() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.r ~
        col![
            0.0012173682910865844,
            0.00003758291799171295,
            0.00000019226389844084757,
            -1.720176981412358e-8,
            -1.3636911599945734e-8,
            0.00004035004975103031,
            -0.0102686183575055,
            -0.0002443260439172247,
            -0.0000012550054029336621,
            1.612768253528296e-7,
            -2.850962204092866e-7,
            -0.0002040543566753146,
            0.009051250066418914,
            0.00020674312592550842,
            0.000001062741501911546,
            2.8651856190387015e-7,
            -6.677160976908958e-9,
            -0.0006527242122432346,
        ]
    );
}

#[test]
fn test_iter_1_solver_kt() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.kt ~
        mat![
            [
                319239.6663653215,
                -0.0006403795218210139,
                5.242280915619271,
                0.00000003966948951282794,
                -24.03914193128974,
                -0.004443814858534323,
                -364845.33238421334,
                0.001832505183925632,
                -9.082557874359937,
                -0.00000002662548324462126,
                -12.077903659742805,
                -0.001983438809772059,
                45605.66601889189,
                -0.0011921256621046181,
                3.8402769587406658,
                -0.00000027716362463770246,
                1.1423440024227598,
                0.0019821902771186162
            ],
            [
                -0.0006403795218210139,
                20663.999997963732,
                -0.03758584083238689,
                0.5450152298169421,
                0.12324082256125055,
                44280.0000063646,
                0.0018325051839256318,
                -23615.99999240684,
                -0.04738733375263364,
                -0.7845957036719882,
                0.24784504928949155,
                59039.9999765731,
                -0.0011921256621046181,
                2951.999994443102,
                0.08497317458502056,
                1.0899047985698778,
                0.24170982668021423,
                -14759.998747966307
            ],
            [
                5.242280915619271,
                -0.03758584083238688,
                9048.666970048183,
                -0.00018886402209463467,
                -19390.00011183922,
                -0.12324086223074002,
                -9.082557874359937,
                -0.04738733375263367,
                -10341.33429004649,
                -0.00012004034505166958,
                -25853.333422069336,
                -0.24784502266400832,
                3.840276958740665,
                0.08497317458502057,
                1292.6673199983077,
                0.00026164747925473995,
                6463.3320081137645,
                -0.24170954951658963
            ],
            [
                0.000000039669489512827935,
                0.545015229816942,
                -0.00018886402209463467,
                3957.3362765353872,
                4108.999118220052,
                -79.08634874826316,
                -0.00000015545748760807236,
                -0.0000717793487465257,
                0.00035340175500905087,
                -4522.671789988305,
                -4696.005278735422,
                97.39112636998087,
                0.00000011578799809524442,
                -0.5449434504681931,
                -0.00016453773291441612,
                565.3352450031124,
                587.0019389663861,
                -10.414383804815518
            ],
            [
                -24.03914193128974,
                0.12324082256125052,
                -19390.00011183922,
                4109.00352033397,
                65501.335660181125,
                -85.85653666153358,
                28.126073047546654,
                -0.00272674477839115,
                25853.332685952824,
                -4696.0010234352485,
                10088.002113009157,
                99.4137872700101,
                -4.086931116256911,
                -0.12051407778285936,
                -6463.332574113609,
                587.0010450864733,
                -10955.99756738725,
                -12.191475776766014
            ],
            [
                -0.004443814858534323,
                44280.0000063646,
                -0.12324086223074004,
                -80.61209345873301,
                -86.02039187504057,
                151089.66431360855,
                0.006130786461181196,
                -59039.99933875827,
                0.0027269002358788035,
                97.126183659231,
                99.22160417888769,
                21314.6742039313,
                -0.0016869716026468736,
                14759.999332393672,
                0.12051396199486124,
                -10.610552020727775,
                -12.141656628492811,
                -24804.335143939814
            ],
            [
                -364845.33238421334,
                0.001832505183925632,
                -9.082557874359937,
                -0.00000015545748760807239,
                28.126073047546654,
                0.006130786461181197,
                729690.6614222707,
                -0.01093010329228268,
                44.701631641617354,
                0.0000006153890095458107,
                23.556697165038024,
                -0.0012341998988125978,
                -364845.3290380573,
                0.009097598108357047,
                -35.61907376725741,
                0.0000014163490033237151,
                7.208972572827973,
                -0.008545861057880764
            ],
            [
                0.0018325051839256318,
                -23615.99999240684,
                -0.047387333752633654,
                -0.00007177934874647018,
                -0.002726744778391195,
                -59039.99933875827,
                -0.01093010329228268,
                47231.99996364877,
                0.5795567736657774,
                -4.359691162443042,
                -0.9695661118196571,
                -0.004018367056687566,
                0.009097598108357046,
                -23615.999971241938,
                -0.5321694399131437,
                -6.539464775501033,
                -1.4516223626306854,
                59039.99298268166
            ],
            [
                -9.082557874359937,
                -0.04738733375263366,
                -10341.334290046492,
                0.00035340175500905087,
                25853.332685952824,
                0.002726900235878793,
                44.701631641617354,
                0.5795567736657774,
                20682.67194741379,
                -0.0006094983532972274,
                0.004778996729783103,
                0.9695654964306476,
                -35.61907376725742,
                -0.5321694399131437,
                -10341.337657367298,
                -0.0013513390936675735,
                -25853.325642956668,
                1.451620946281682
            ],
            [
                -0.000000026625483244621276,
                -0.7845957036719882,
                -0.0001200403450516696,
                -4522.671789988304,
                -4696.001069591685,
                98.10684839799967,
                0.0000006153890095458106,
                -4.359691162443043,
                -0.0006094983532972274,
                9045.359480219953,
                9392.019348513388,
                -214.97102651632133,
                -0.0000005887635263011893,
                5.1442868661150305,
                0.000729538698348897,
                -4522.685077263994,
                -4696.0141632163295,
                86.82533334571278
            ],
            [
                -12.077903659742805,
                0.24784504928949155,
                -25853.333422069336,
                -4696.005232578984,
                10088.002113009159,
                99.19995477213685,
                23.556697165038017,
                -0.9695661118196571,
                0.004778996727964113,
                9392.019074554484,
                238357.32956166248,
                -199.03803283203695,
                -11.478793505295215,
                0.7217210625301658,
                25853.328643072542,
                -4696.011656694842,
                10087.984739137453,
                97.45309802522841
            ],
            [
                -0.0019834388097720594,
                59039.9999765731,
                -0.2478450226640083,
                96.41046163121221,
                99.43543667676094,
                21314.6742039313,
                -0.001234199898812597,
                -0.004018367053049587,
                0.9695654964306476,
                -214.18214823331277,
                -199.02510939887046,
                547770.619765356,
                0.003217638708584657,
                -59039.99595820595,
                -0.7217204737666391,
                88.88357112457099,
                97.25965072056296,
                21314.685676470173
            ],
            [
                45605.66601889189,
                -0.001192125662104618,
                3.8402769587406658,
                0.00000011578799809524443,
                -4.086931116256911,
                -0.001686971602646874,
                -364845.32903805736,
                0.009097598108357047,
                -35.61907376725741,
                -0.0000005887635263011894,
                -11.478793505295222,
                0.003217638708584657,
                319239.6630191655,
                -0.00790547244625243,
                31.77879680851675,
                -0.0000011391853786860126,
                -8.351316575250735,
                0.006563670780762147
            ],
            [
                -0.001192125662104618,
                2951.999994443103,
                0.08497317458502054,
                -0.544943450468193,
                -0.12051407778285933,
                14759.999332393672,
                0.009097598108357047,
                -23615.999971241938,
                -0.5321694399131436,
                5.1442868661150305,
                0.7217210625301655,
                -59039.995958205945,
                -0.00790547244625243,
                20663.999976798837,
                0.4471962653281232,
                5.4495599769311545,
                1.2099125359504712,
                -44279.99423471535
            ],
            [
                3.840276958740665,
                0.08497317458502056,
                1292.6673199983077,
                -0.00016453773291441612,
                -6463.332574113609,
                0.12051396199486127,
                -35.61907376725741,
                -0.5321694399131437,
                -10341.3376573673,
                0.000729538698348897,
                25853.328643072546,
                -0.7217204737666393,
                31.778796808516745,
                0.4471962653281232,
                9048.670337368992,
                0.0010896916144128334,
                19389.993634842904,
                -1.2099113967650927
            ],
            [
                -0.00000027716362463770246,
                1.0899047985698775,
                0.0002616474792547399,
                565.3352450031124,
                587.001151525111,
                -10.666539351635695,
                0.0000014163490033237151,
                -6.539464775501031,
                -0.0013513390936675735,
                -4522.685077263994,
                -4696.012036292956,
                88.12685570943403,
                -0.0000011391853786860126,
                5.4495599769311545,
                0.0010896916144128334,
                3957.3526339828745,
                4109.014434032551,
                -99.52397367976106
            ],
            [
                1.1423440024227576,
                0.24170982668021426,
                6463.332008113765,
                587.0018325277482,
                -10955.997567387249,
                -12.14488733787154,
                7.208972572827978,
                -1.4516223626306854,
                -25853.325642956668,
                -4696.013783618216,
                10087.984739137459,
                97.2942229648287,
                -8.351316575250737,
                1.2099125359504712,
                19389.993634842904,
                4109.014757606112,
                65501.32521508741,
                -90.0222238692114
            ],
            [
                0.0019821902771186162,
                -14759.998747966307,
                -0.2417095495165896,
                -10.358396473907602,
                -12.188245067387287,
                -24804.335143939814,
                -0.008545861057880761,
                59039.99298268165,
                1.451620946281682,
                87.58204876084976,
                97.41852578096263,
                21314.685676470173,
                0.006563670780762146,
                -44279.99423471535,
                -1.2099113967650925,
                -99.95658136836376,
                -89.99088107045411,
                151089.62687297573
            ],
        ]
    );
}

#[test]
fn test_iter_1_solver_m() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.m ~
        mat![
            [
                0.11383999999999994,
                0.000000000000000000000000006766474871994107,
                -0.00000000000000000000007313388675181522,
                0.,
                0.,
                0.,
                0.05692000000000001,
                -0.00000000000000000000000006922781748019401,
                -0.00000000000000000000019345675103465525,
                0.,
                0.,
                0.,
                -0.028459999999999996,
                -0.000000000000000000000000042601157410116094,
                0.000000000000000000000028001878104445687,
                0.,
                0.,
                0.
            ],
            [
                0.000000000000000000000000005018180930368662,
                0.11383999999999997,
                0.0000000000000000000000017891232291176517,
                0.,
                0.,
                0.,
                -0.00000000000000000000000004733638245147751,
                0.056920000000000054,
                0.00000000000000000000004659530180439093,
                0.,
                0.,
                0.,
                -0.000000000000000000000000006567324366516594,
                -0.028460000000000006,
                -0.000000000000000000000006569794640282649,
                0.,
                0.,
                0.
            ],
            [
                -0.00000000000000000000006819209641368409,
                -0.000000000000000000000034087012958674575,
                0.11383999999999997,
                0.,
                0.,
                0.,
                -0.00000000000000000000012938501077125551,
                -0.00000000000000000000004728369286727241,
                0.05692000000000003,
                0.,
                0.,
                0.,
                -0.00000000000000000000003866981498859595,
                -0.00000000000000000000008334122605808283,
                -0.028460000000000006,
                0.,
                0.,
                0.
            ],
            [
                0.,
                0.,
                0.,
                0.019243999998169285,
                -0.00000000000667163970460844,
                0.00000004463921838626197,
                0.,
                0.,
                0.,
                0.009622000007838846,
                0.00000000004662015724550362,
                -0.00000004607057395314553,
                0.,
                0.,
                0.,
                -0.00481099999206351,
                0.000000000041563049519004335,
                -0.0000000791921485644784
            ],
            [
                0.,
                0.,
                0.,
                -0.00000000000667163970460844,
                0.005462933333867625,
                0.00000003315843387321573,
                0.,
                0.,
                0.,
                0.00000000004662015724550362,
                0.0027314666656339344,
                0.0000000872833621639353,
                0.,
                0.,
                0.,
                0.000000000041563049519004335,
                -0.0013657333351764212,
                0.0000000323040879168911
            ],
            [
                0.,
                0.,
                0.,
                0.000000044639218386261996,
                0.00000003315843387321573,
                0.013781333334629739,
                0.,
                0.,
                0.,
                -0.000000046070573953145584,
                0.00000008728336216393532,
                0.006890666659860556,
                0.,
                0.,
                0.,
                -0.00000007919214856447842,
                0.0000000323040879168911,
                -0.003445333339426735
            ],
            [
                0.05691999999999999,
                -0.00000000000000000000000006922781748019401,
                -0.00000000000000000000019345675103465523,
                0.,
                0.,
                0.,
                0.4553600000000001,
                0.00000000000000000000000040102198759413506,
                0.0000000000000000000012059045576229672,
                0.,
                0.,
                0.,
                0.05691999999999999,
                0.00000000000000000000000023963244712065835,
                0.00000000000000000000008144923861687249,
                0.,
                0.,
                0.
            ],
            [
                -0.00000000000000000000000004733638245147751,
                0.05692000000000005,
                0.00000000000000000000004659530180439092,
                0.,
                0.,
                0.,
                0.00000000000000000000000005238007001713487,
                0.45536000000000015,
                0.00000000000000000000014086566080371524,
                0.,
                0.,
                0.,
                0.00000000000000000000000007360567991754386,
                0.05691999999999999,
                -0.00000000000000000000002031612324326033,
                0.,
                0.,
                0.
            ],
            [
                -0.00000000000000000000012938501077125547,
                -0.0000000000000000000000472836928672724,
                0.05692000000000005,
                0.,
                0.,
                0.,
                0.0000000000000000000005469656542139997,
                0.00000000000000000000035644887998631237,
                0.4553600000000001,
                0.,
                0.,
                0.,
                0.0000000000000000000002840642707256391,
                0.0000000000000000000003806485970996037,
                0.05691999999999999,
                0.,
                0.,
                0.
            ],
            [
                0.,
                0.,
                0.,
                0.009622000007838845,
                0.00000000004662015724550362,
                -0.00000004607057395314553,
                0.,
                0.,
                0.,
                0.07697599992833418,
                -0.0000000004835939638456298,
                0.0000010827920943716608,
                0.,
                0.,
                0.,
                0.009621999960415198,
                -0.00000000021287235532152095,
                0.00000036283916821105915
            ],
            [
                0.,
                0.,
                0.,
                0.00000000004662015724550362,
                0.0027314666656339344,
                0.0000000872833621639353,
                0.,
                0.,
                0.,
                -0.0000000004835939638456298,
                0.021851733341739427,
                -0.0000001677319440417775,
                0.,
                0.,
                0.,
                -0.00000000021287235532152095,
                0.00273146667507175,
                -0.00000021649971383149966
            ],
            [
                0.,
                0.,
                0.,
                -0.0000000460705739531456,
                0.0000000872833621639353,
                0.006890666659860556,
                0.,
                0.,
                0.,
                0.0000010827920943716613,
                -0.00000016773194404177746,
                0.055125333396593125,
                0.,
                0.,
                0.,
                0.00000036283916821105937,
                -0.00000021649971383149966,
                0.006890666697846387
            ],
            [
                -0.028459999999999996,
                -0.00000000000000000000000004260115741011608,
                0.00000000000000000000002800187810444568,
                0.,
                0.,
                0.,
                0.05691999999999998,
                0.00000000000000000000000023963244712065835,
                0.0000000000000000000000814492386168725,
                0.,
                0.,
                0.,
                0.11383999999999997,
                -0.00000000000000000000000011918124001364205,
                -0.000000000000000000000011758585214358336,
                0.,
                0.,
                0.
            ],
            [
                -0.00000000000000000000000000656732436651659,
                -0.028460000000000006,
                -0.0000000000000000000000065697946402826474,
                0.,
                0.,
                0.,
                0.00000000000000000000000007360567991754385,
                0.05691999999999999,
                -0.000000000000000000000020316123243260333,
                0.,
                0.,
                0.,
                -0.0000000000000000000000003606141906704767,
                0.11384,
                0.0000000000000000000000029284011878612168,
                0.,
                0.,
                0.
            ],
            [
                -0.000000000000000000000038669814988595924,
                -0.00000000000000000000008334122605808282,
                -0.02846,
                0.,
                0.,
                0.,
                0.0000000000000000000002840642707256392,
                0.0000000000000000000003806485970996037,
                0.05691999999999999,
                0.,
                0.,
                0.,
                -0.00000000000000000000009391970358987168,
                0.0000000000000000000009646436941209257,
                0.11383999999999997,
                0.,
                0.,
                0.
            ],
            [
                0.,
                0.,
                0.,
                -0.00481099999206351,
                0.00000000004156304951900433,
                -0.0000000791921485644784,
                0.,
                0.,
                0.,
                0.009621999960415196,
                -0.00000000021287235532152092,
                0.00000036283916821105915,
                0.,
                0.,
                0.,
                0.01924399991668794,
                -0.00000000039356848448937545,
                0.0000006580038249230407
            ],
            [
                0.,
                0.,
                0.,
                0.000000000041563049519004335,
                -0.0013657333351764212,
                0.0000000323040879168911,
                0.,
                0.,
                0.,
                -0.00000000021287235532152092,
                0.0027314666750717495,
                -0.00000021649971383149966,
                0.,
                0.,
                0.,
                -0.0000000003935684844893755,
                0.005462933357586965,
                -0.000000422516186241089
            ],
            [
                0.,
                0.,
                0.,
                -0.00000007919214856447843,
                0.0000000323040879168911,
                -0.003445333339426735,
                0.,
                0.,
                0.,
                0.0000003628391682110593,
                -0.00000021649971383149966,
                0.006890666697846385,
                0.,
                0.,
                0.,
                0.0000006580038249230407,
                -0.0000004225161862410891,
                0.013781333392391765
            ],
        ]
    );
}

#[test]
fn test_iter_1_solver_ct() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.ct ~
        mat![
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [
                0.,
                0.,
                0.,
                -0.0000000005492113933953933,
                -0.0000000008877059484590715,
                -0.000020392615914709517,
                0.,
                0.,
                0.,
                0.0000000023516531767400774,
                0.000000004781416147353664,
                0.00002104650561809308,
                0.,
                0.,
                0.,
                0.000000002380946855800553,
                0.000000004131528293566481,
                0.00003617749514012124
            ],
            [
                0.,
                0.,
                0.,
                -0.0000000010922434002744726,
                0.00000000016028839541127493,
                -0.000006532511339227402,
                0.,
                0.,
                0.,
                0.000000008958510305119011,
                -0.0000000003098195783483323,
                -0.00001719561088464386,
                0.,
                0.,
                0.,
                0.000000008109141005938145,
                -0.0000000005529264079329766,
                -0.000006364196791169527
            ],
            [
                0.,
                0.,
                0.,
                0.000033784381292411755,
                0.000016480041331125268,
                0.00000000038892299798411805,
                0.,
                0.,
                0.,
                -0.000034867677142326514,
                0.00004338062056375124,
                -0.000000002041833598391744,
                0.,
                0.,
                0.,
                -0.000059935138975629325,
                0.00001605542415344538,
                -0.000000001828020447867576
            ],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [
                0.,
                0.,
                0.,
                0.0000000023516531767400774,
                0.000000004781416147353664,
                0.000021046505618093087,
                0.,
                0.,
                0.,
                -0.00000002149975671309437,
                -0.0000000705001988290032,
                -0.0004946538984946871,
                0.,
                0.,
                0.,
                -0.00000001187544059994229,
                -0.000000021307529321619588,
                -0.00016575648617857806
            ],
            [
                0.,
                0.,
                0.,
                0.00000000895851030511901,
                -0.0000000003098195783483323,
                -0.00001719561088464386,
                0.,
                0.,
                0.,
                -0.00000007343028514601162,
                0.0000000025218266303596265,
                0.00003304470561782357,
                0.,
                0.,
                0.,
                -0.000000041395074328871584,
                0.0000000025215252100802382,
                0.00004265239804932196
            ],
            [
                0.,
                0.,
                0.,
                -0.00003486767714232653,
                0.00004338062056375124,
                -0.000000002041833598391744,
                0.,
                0.,
                0.,
                0.0008194915226343793,
                -0.00008336429647849244,
                0.00000001897793008273473,
                0.,
                0.,
                0.,
                0.00027460823304484386,
                -0.00010760231717753275,
                0.00000000935391538986205
            ],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [
                0.,
                0.,
                0.,
                0.0000000023809468558005523,
                0.000000004131528293566481,
                0.00003617749514012124,
                0.,
                0.,
                0.,
                -0.000000011875440599942288,
                -0.000000021307529321619588,
                -0.00016575648617857806,
                0.,
                0.,
                0.,
                -0.000000024993618086818964,
                -0.000000029147156486292983,
                -0.00030059710407786655
            ],
            [
                0.,
                0.,
                0.,
                0.000000008109141005938145,
                -0.0000000005529264079329765,
                -0.000006364196791169525,
                0.,
                0.,
                0.,
                -0.000000041395074328871584,
                0.0000000025215252100802382,
                0.00004265239804932196,
                0.,
                0.,
                0.,
                -0.00000008609143319822112,
                0.0000000072760896716234505,
                0.00008323950160926496
            ],
            [
                0.,
                0.,
                0.,
                -0.00005993513897562932,
                0.00001605542415344538,
                -0.000000001828020447867576,
                0.,
                0.,
                0.,
                0.0002746082330448438,
                -0.00010760231717753275,
                0.000000009353915389862048,
                0.,
                0.,
                0.,
                0.0004979982425782471,
                -0.00020999436840558744,
                0.000000017717528415195522
            ],
        ]
    );
}

#[test]
#[ignore]
fn test_iter_1_solver_t() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.t ~
        mat![
            [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
            [
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.9999999996574209,
                3.5620395968971034e-9,
                2.266866613324229e-5,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.
            ],
            [
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.0000000035620395968971174,
                0.999999999999993,
                1.0270608798991574e-7,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.
            ],
            [
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                -0.00002266866613275471,
                -1.0270598037455526e-7,
                0.9999999996574139,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.
            ],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
            [
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.9999999962644521,
                -0.000000020991979875493122,
                -7.485533728943503e-5
            ],
            [
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                -2.0991979875493056e-8,
                0.9999999991108882,
                -3.651940857981379e-5
            ],
            [
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                0.,
                7.485533635602174e-5,
                -2.0991979875493122e-8,
                0.9999999953753408
            ],
        ]
    );
}

#[test]
#[ignore]
fn test_iter_1_solver_st() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.st.submatrix(0, 0, solver.n_system, solver.n_system) ~
        mat![
            [
                328346.8663653215,
                -0.0006403795218210139,
                5.242280915619271,
                0.00000003966948951282794,
                -24.03914193128974,
                -0.004443814858534323,
                -360291.73238421336,
                0.001832505183925632,
                -9.082557874359937,
                -0.000000024685542145541214,
                -12.077903659946431,
                -0.001982198336759882,
                43328.86601889189,
                -0.0011921256621046181,
                3.8402769587406658,
                -0.0000004057248092467047,
                1.1423439290186774,
                0.0020239079767532583
            ],
            [
                -0.0006403795218210139,
                29771.19999796373,
                -0.03758584083238689,
                0.5450152298169421,
                0.12324082256125055,
                44280.0000063646,
                0.0018325051839256318,
                -19062.399992406834,
                -0.04738733375263363,
                -2.1229537504671496,
                0.25390881951433236,
                59039.99993853562,
                -0.0011921256621046181,
                675.1999944431013,
                0.08497317458502056,
                2.194769483362104,
                0.7807362285005696,
                -14759.998589294051
            ],
            [
                5.242280915619271,
                -0.03758584083238688,
                18155.86697004818,
                -0.00018886402209463467,
                -19390.00011183922,
                -0.12324086223074002,
                -9.082557874359937,
                -0.047387333752633674,
                -5787.734290046487,
                -0.00020651262630030549,
                -25853.33342209461,
                -0.24518973334519129,
                3.840276958740665,
                0.08497317458502057,
                -984.132680001693,
                0.00039186068434883114,
                6463.332011194224,
                -0.005672454055752674
            ],
            [
                0.000000039669489512827935,
                0.545015229816942,
                -0.00018886402209463467,
                5496.856276224166,
                4108.999117420009,
                -79.08889539556668,
                -0.00000015545748760807236,
                -0.0000717793487465257,
                0.00035340175500905087,
                -3752.9140115606133,
                -4696.005247472794,
                97.29171401337372,
                0.00000011578799809524442,
                -0.5449434504681931,
                -0.00016453773291441612,
                180.45603399546246,
                587.0023114686094,
                -10.3461105553077
            ],
            [
                -24.03914193128974,
                0.12324082256125052,
                -19390.00011183922,
                4109.003519472566,
                65938.37032693862,
                -85.8558437402255,
                28.126073047546654,
                -0.00272674477839115,
                25853.332685952824,
                -4696.003233053421,
                10306.519473090018,
                99.30812304415139,
                -4.086931116256911,
                -0.12051407778285936,
                -6463.332574113609,
                587.0017711939222,
                -11065.255791722964,
                -12.546967064241793
            ],
            [
                -0.004443814858534323,
                44280.0000063646,
                -0.12324086223074004,
                -80.59838700687439,
                -86.01279518793137,
                152192.1709804956,
                0.006130786461181196,
                -59039.99933875827,
                0.0027269002358788035,
                96.6288627970726,
                99.2437898351677,
                21865.92972033586,
                -0.0016869716026468736,
                14759.999332393672,
                0.12051396199486124,
                -8.77813123185192,
                -11.22841579100947,
                -25079.962934593346
            ],
            [
                -360291.73238421336,
                0.001832505183925632,
                -9.082557874359937,
                -0.00000015545748760807239,
                28.126073047546654,
                0.006130786461181197,
                766119.4614222707,
                -0.01093010329228268,
                44.701631641617354,
                0.0000007272765628562332,
                23.556697164911096,
                -0.0012366192981164512,
                -360291.7290380573,
                0.009097598108357047,
                -35.61907376725741,
                0.0000021811069548623153,
                7.208972878508152,
                -0.008282593483717404
            ],
            [
                0.0018325051839256318,
                -19062.399992406834,
                -0.04738733375263365,
                -0.00007177934874647018,
                -0.002726744778391195,
                -59039.99933875827,
                -0.01093010329228268,
                83660.79996364878,
                0.5795567736657774,
                -4.3596910733121135,
                -0.9695660967165023,
                -0.004117095858478346,
                0.009097598108357046,
                -19062.39997124194,
                -0.5321694399131437,
                -10.958923364538478,
                -3.6077278503476102,
                59039.99216711558
            ],
            [
                -9.082557874359937,
                -0.04738733375263367,
                -5787.734290046488,
                0.00035340175500905087,
                25853.332685952824,
                0.002726900235878793,
                44.701631641617354,
                0.5795567736657774,
                57111.4719474138,
                -0.0006314770925978751,
                0.004779096312231422,
                0.9695654817911418,
                -35.61907376725742,
                -0.5321694399131437,
                -5787.737657367298,
                -0.0019084804475844636,
                -25853.325672982483,
                0.5074726266473534
            ],
            [
                -0.000000026625483244621276,
                -0.7845957036719882,
                -0.0001200403450516696,
                -3752.9117886557005,
                -4696.001064427648,
                98.10947670376885,
                0.0000006153890095458106,
                -4.359691162443043,
                -0.0006094983532972274,
                15203.444371499183,
                9392.019234405063,
                -214.82871762711653,
                -0.0000005887635263011893,
                5.1442868661150305,
                0.000729538698348897,
                -3752.9316479004638,
                -4696.017258332804,
                86.29459035017979
            ],
            [
                -12.077903659742805,
                0.24784504928949155,
                -25853.333422069336,
                -4696.005226161818,
                10306.519446166927,
                99.20177875784456,
                23.556697165038017,
                -0.9695661118196571,
                0.004778996727964113,
                9392.024371585334,
                240105.4681758885,
                -198.85311408618125,
                -11.478793505295215,
                0.7217210625301658,
                25853.328643072542,
                -4696.018788488391,
                10306.498604579383,
                97.46545904049201
            ],
            [
                -0.0019834388097720594,
                59039.9999765731,
                -0.2478450226640083,
                96.39631568215327,
                99.45543353190318,
                21865.927536107592,
                -0.001234199898812597,
                -0.004018367053049587,
                0.9695654964306476,
                -226.26690734132671,
                -199.00727710360366,
                552180.6414203356,
                0.003217638708584657,
                -59039.99595820595,
                -0.7217204737666391,
                87.39946409755325,
                96.43164838101701,
                21865.94912180562
            ],
            [
                43328.86601889189,
                -0.001192125662104618,
                3.8402769587406658,
                0.00000011578799809524443,
                -4.086931116256911,
                -0.001686971602646874,
                -360291.7290380574,
                0.009097598108357047,
                -35.61907376725741,
                -0.0000007025910207106921,
                -11.478793504964669,
                0.0032188176348763335,
                328346.8630191655,
                -0.00790547244625243,
                31.77879680851675,
                -0.0000017753821456156105,
                -8.351316807526832,
                0.006258685506964145
            ],
            [
                -0.001192125662104618,
                675.1999944431022,
                0.08497317458502054,
                -0.544943450468193,
                -0.12051407778285933,
                14759.999332393672,
                0.009097598108357047,
                -19062.39997124194,
                -0.5321694399131436,
                6.482644823779262,
                0.7156572772021699,
                -59039.99582143967,
                -0.00790547244625243,
                29771.199976798838,
                0.4471962653281232,
                8.764153881176373,
                2.8269916218470406,
                -44279.99357782153
            ],
            [
                3.840276958740665,
                0.08497317458502056,
                -984.132680001692,
                -0.00016453773291441612,
                -6463.332574113609,
                0.12051396199486127,
                -35.61907376725741,
                -0.5321694399131437,
                -5787.7376573673,
                0.0008379897188981807,
                25853.32864299824,
                -0.7243757484459504,
                31.778796808516745,
                0.44719626532812323,
                18155.87033736899,
                0.0015166197632356323,
                19389.99366178826,
                -0.5018001725916001
            ],
            [
                -0.00000027716362463770246,
                1.0899047985698775,
                0.0002616474792547399,
                180.4552463523156,
                587.0011560896135,
                -10.662021474978816,
                0.0000014163490033237151,
                -6.539464775501031,
                -0.0013513390936675735,
                -3752.9270968896835,
                -4696.0120345678615,
                88.00411493732405,
                -0.0000011391853786860126,
                5.4495599769311545,
                0.0010896916144128334,
                5496.880126216976,
                4109.017941633545,
                -99.11522429739155
            ],
            [
                1.1423440024227576,
                0.24170982668021426,
                6463.332008113765,
                587.0018382855345,
                -11065.25623436724,
                -12.144212269875538,
                7.208972572827978,
                -1.4516223626306854,
                -25853.325642956668,
                -4696.015981054226,
                10306.502100605103,
                97.18221020882476,
                -8.351316575250737,
                1.2099125359504712,
                19389.993634842904,
                4109.022559844632,
                65938.36302894121,
                -87.33140143216352
            ],
            [
                0.0019821902771186162,
                -14759.998747966307,
                -0.2417095495165896,
                -10.38271238748545,
                -12.180844113107902,
                -25079.96181164236,
                -0.008545861057880761,
                59039.99298268165,
                1.451620946281682,
                87.21028318790046,
                97.37111394498588,
                21865.9409831647,
                0.006563670780762146,
                -44279.99423471535,
                -1.2099113967650925,
                -111.06440775779461,
                -95.6053823135224,
                152192.12208224685
            ],
        ]
    );
}

#[test]
fn test_iter_1_x() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.x.subrows(0, solver.n_system) ~
        col![
            0.,
            0.,
            0.,
            0.,
            0.,
            0.,
            9.082920642093272e-10,
            -0.0000000001434626536582747,
            0.000000000006255829273157266,
            -0.00000000003164459471874266,
            0.000000000000951335320233587,
            0.00000000014477835133791111,
            -0.000000026569460285280772,
            -0.0000000005611783441842933,
            -0.00000000001743434952275983,
            -0.000000000005406546196785461,
            0.000000000007450824636627356,
            0.000000004160415663177322,
        ]
    );
}

#[test]
fn test_iter_1_x_delta() {
    let (solver, _) = setup_test(1);

    let approx_eq = CwiseMat(ApproxEq::eps() * 1000.);
    assert!(
        solver.x_delta ~
        mat![
            [0., 0.0000000009082920642093272, -0.000000026569460285280772],
            [
                0.,
                -0.0000000001434626536582747,
                -0.0000000005611783441842933
            ],
            [
                0.,
                0.000000000006255829273157266,
                -0.00000000001743434952275983
            ],
            [
                0.,
                -0.00000000003164459471874266,
                -0.000000000005406546196785461
            ],
            [
                0.,
                0.000000000000951335320233587,
                0.000000000007450824636627356
            ],
            [0., 0.00000000014477835133791111, 0.000000004160415663177322],
        ]
    );
}

#[test]
fn test_steps() {
    let (mut solver, mut state) = setup_test(5);

    let tip_z_dof = solver.nfm.get_dof(state.n_nodes - 1, Direction::Z).unwrap();

    for i in 2..100 {
        solver.fx[tip_z_dof] = 100. * (10.0 * (i as f64) * 0.005).sin();
        let res = solver.step(&mut state);
        assert_eq!(res.converged, true)
    }
}
